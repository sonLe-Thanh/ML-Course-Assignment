     The future of complex and critical systems in transportation and space       exploration provides a       challenge for systems engineering.
Without the means of diagnosing and       checking system       correctness, system autonomy of the kind required for remote or long       period exploration will be       frustrated and the benefits of these new engineering technologies limited.
Model checking for       multi-agent systems, such as autonomous rovers and avionic control       systems, has led to the       development of a number of tools and techniques for deployment in current       and emerging (new       generation) control technologies.
Dr. Raimondi's work has focused on a number of areas with direct impact       in aviation flight       management and autonomous space systems &#8212; namely diagnosability, planning       and verification.
The initial research work of Dr. Raimondi in collaboration with NASA Ames       [7] focussed on the       verification of diagnosability for autonomous systems using       temporal-epistemic logic and a       bespoke version of NuSMV, implementing the verification of AR-CTL (a logic       to reason about       actions and CTL operators) with applications to NASA Livingstone models       (http://ti.arc.nasa.gov/tech/rse/vandv/livingstone/).
Support for the verification of diagnosability has       since then moved to other model checkers, including MCMAS.
In addition to diagnosability, it is usually required to verify that       autonomous systems do not violate       a certain set of safety requirements, known as flight rules.
As       the behaviour of such systems is       often regulated by AI planners, in a number of cases it is necessary to       verify that all plans       generated by an AI planner satisfy these flight rules.
A flight       rule for an autonomous rover could       require that `no two scientific instruments can be deployed at the same       time, with the exception of       the panoramic camera if battery levels are above 50%'.
Our work detailed       in two studies [5] [3]       resulted in constructive algorithms for the generation of plan constraints       from requirements, and in       an tool implementing them.
The tool has since then been released as       open-source and it remains       the only approach to provide verification mechanisms for planning domains.
Following these initial results in the verification of autonomy, we were       able to exploit our expertise       with Binary Decision Diagrams (BDDs) in model checking multi-agent       systems.
This resulted in the       development of a hybrid explicit/symbolic technique for the verification       of Java code that was       incorporated into the NASA open-source model checker Java Pathfinder, as       part of Google       Summer of Code 2011 [7] [S3].
The ideas of this work have since then been       adopted outside the       area of multi-agent systems and resulted in the development of new       approaches for the verification       of Software Product Lines at the University of Passau (Germany).
More recently, the work on diagnosability and Java Pathfinder [7] has       been at the root of the       framework described in [2].
This framework addresses one of the main       issues that have prevented       the adoption of model checkers in `real' scenarios.
It is impractical and,       in most cases, extremely       inefficient, to convert the modelling languages currently in use by       practitioners into the input       languages of model checkers.
This is true both for temporal-only model       checkers and for model       checkers targeted at multi-agent systems.
For instance, modelling       frameworks such as Brahms       (http://www.agentisolutions.com/)       are currently employed by NASA to model the interactions       between humans and automation in aviation.
However, direct translation       from Brahms to any       model checker would result in the creation of cumbersome and inefficient       input code to support       inheritance and a number of other Java-like constructs.
The research work       carried out at Middlesex       University, in conjunction with NASA Ames, has lead to a new approach       exploiting software model       checkers to explore the state space of Brahms models, and then translating       this state space to the       input language of model checkers such as SPIN, PRISM, and MCMAS.
As       described in [2, 6], this       approach has enabled the verification of complex avionic scenarios,       adopting a rich language for       requirements, and enabling the analysis of models whose size is orders of       magnitude larger than       previously possible.
